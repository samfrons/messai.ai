name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "8.15.0"

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run all tests
        run: |
          pnpm lint
          pnpm type-check
          pnpm test --coverage --watchAll=false
          pnpm build
        env:
          CI: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Update version based on input or automatic detection
          if [[ "${{ github.event.inputs.release_type }}" != "" ]]; then
            npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          fi

          # Get version for tag
          VERSION=$(node -p "require('./package.json').version")

          # Create git tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: release v${VERSION}" || echo "No changes to commit"
          git tag "v${VERSION}"
          git push origin main --tags

          # Create GitHub release
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "$(git log --pretty=format:'- %s' $(git describe --tags --abbrev=0 HEAD^)..HEAD)" \
            --latest

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    environment:
      name: staging
      url: https://staging.messai.ai

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for staging
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_URL: https://staging.messai.ai
          NEXT_PUBLIC_API_URL: https://staging.messai.ai/api

      - name: Deploy to Vercel (Staging)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prebuilt"
          alias-domains: staging.messai.ai

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    environment:
      name: production
      url: https://messai.ai

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_URL: https://messai.ai
          NEXT_PUBLIC_API_URL: https://messai.ai/api

      - name: Deploy to Vercel (Production)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prebuilt --prod"

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Successfully deployed to production!"
          echo "URL: https://messai.ai"
