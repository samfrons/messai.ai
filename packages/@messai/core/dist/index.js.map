{"version":3,"sources":["../src/index.ts","../src/types/index.ts","../src/utils/index.ts","../src/predictions/index.ts","../src/domains/index.ts"],"sourcesContent":["// Core MESSAi business logic exports\nexport * from './types'\nexport * from './utils'\nexport * from './predictions'\nexport * from './domains'\n\n// Scientific constants\nexport const SCIENTIFIC_CONSTANTS = {\n  FARADAY_CONSTANT: 96485, // C/mol\n  GAS_CONSTANT: 8.314,     // J/(mol·K)\n  STANDARD_TEMP: 298.15,   // K (25°C)\n  STANDARD_PRESSURE: 101325 // Pa\n} as const","import { z } from 'zod'\n\n// Base system type\nexport const SystemTypeSchema = z.enum(['MFC', 'MEC', 'MDC', 'MES'])\nexport type SystemType = z.infer<typeof SystemTypeSchema>\n\n// Core MESS system interface\nexport const MESSSystemSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  type: SystemTypeSchema,\n  volume: z.number().positive(), // L\n  electrodeArea: z.number().positive(), // m²\n})\n\nexport type MESSSystem = z.infer<typeof MESSSystemSchema>\n\n// Performance metrics\nexport const PerformanceMetricsSchema = z.object({\n  powerDensity: z.number().nonnegative(), // mW/m²\n  currentDensity: z.number().nonnegative(), // mA/cm²\n  voltage: z.number().nonnegative(), // V\n  efficiency: z.object({\n    coulombic: z.number().min(0).max(100), // %\n    energy: z.number().min(0).max(100), // %\n  }),\n})\n\nexport type PerformanceMetrics = z.infer<typeof PerformanceMetricsSchema>\n\n// Operating conditions\nexport const OperatingConditionsSchema = z.object({\n  temperature: z.number().min(0).max(100), // °C\n  pH: z.number().min(0).max(14),\n  substrateConcentration: z.number().nonnegative(), // g/L\n})\n\nexport type OperatingConditions = z.infer<typeof OperatingConditionsSchema>\n\n// Material specifications\nexport const MaterialSpecSchema = z.object({\n  anode: z.string(),\n  cathode: z.string(),\n  membrane: z.string().optional(),\n})\n\nexport type MaterialSpec = z.infer<typeof MaterialSpecSchema>\n\n// Base user interface (minimal)\nexport const BaseUserSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  createdAt: z.date(),\n})\n\nexport type BaseUser = z.infer<typeof BaseUserSchema>","// Scientific utility functions\n\n/**\n * Convert Celsius to Kelvin\n */\nexport const celsiusToKelvin = (celsius: number): number => celsius + 273.15\n\n/**\n * Convert Kelvin to Celsius\n */\nexport const kelvinToCelsius = (kelvin: number): number => kelvin - 273.15\n\n/**\n * Calculate pH from hydrogen ion concentration\n */\nexport const concentrationToPH = (hConcentration: number): number => -Math.log10(hConcentration)\n\n/**\n * Calculate hydrogen ion concentration from pH\n */\nexport const pHToConcentration = (pH: number): number => Math.pow(10, -pH)\n\n/**\n * Format scientific values with appropriate precision\n */\nexport const formatScientific = (value: number, precision: number = 3): string => {\n  if (value === 0) return '0'\n  \n  const absValue = Math.abs(value)\n  if (absValue >= 1000 || absValue < 0.001) {\n    return value.toExponential(precision)\n  }\n  \n  return value.toPrecision(precision)\n}\n\n/**\n * Validate email format\n */\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n/**\n * Generate unique identifier\n */\nexport const generateId = (): string => {\n  return Math.random().toString(36).substr(2, 9)\n}\n\n/**\n * Clamp value between min and max\n */\nexport const clamp = (value: number, min: number, max: number): number => {\n  return Math.min(Math.max(value, min), max)\n}\n\n/**\n * Linear interpolation\n */\nexport const lerp = (start: number, end: number, factor: number): number => {\n  return start + (end - start) * factor\n}","import { SCIENTIFIC_CONSTANTS } from '../index'\nimport { OperatingConditions, PerformanceMetrics } from '../types'\nimport { celsiusToKelvin, clamp } from '../utils'\n\n/**\n * Basic power prediction using simplified bioelectrochemical models\n */\nexport class PowerPredictor {\n  /**\n   * Apply Arrhenius correction for temperature effects\n   */\n  private applyTemperatureCorrection(baseRate: number, temperature: number): number {\n    const activationEnergy = 35000 // J/mol (typical for bioelectrochemical reactions)\n    const tempKelvin = celsiusToKelvin(temperature)\n    const referenceTemp = celsiusToKelvin(25) // 25°C reference\n    \n    const factor = Math.exp(\n      (activationEnergy / SCIENTIFIC_CONSTANTS.GAS_CONSTANT) * \n      (1 / referenceTemp - 1 / tempKelvin)\n    )\n    \n    return baseRate * factor\n  }\n\n  /**\n   * Calculate pH effect using bell curve around optimal pH\n   */\n  private calculatePHEffect(pH: number, optimalPH: number = 7.0): number {\n    const tolerance = 1.5\n    const deviation = Math.abs(pH - optimalPH)\n    \n    if (deviation > tolerance * 2) return 0.1 // Extreme pH\n    \n    return Math.exp(-Math.pow(deviation / tolerance, 2))\n  }\n\n  /**\n   * Apply Monod kinetics for substrate limitation\n   */\n  private applySubstrateKinetics(concentration: number): number {\n    const maxRate = 1.0\n    const halfSaturation = 0.5 // g/L\n    \n    return maxRate * concentration / (halfSaturation + concentration)\n  }\n\n  /**\n   * Predict basic performance metrics\n   */\n  predict(\n    conditions: OperatingConditions,\n    systemType: 'MFC' | 'MEC' | 'MDC' | 'MES' = 'MFC'\n  ): PerformanceMetrics {\n    // Base power density for different system types (mW/m²)\n    const basePowerDensity = {\n      MFC: 100,\n      MEC: 150,\n      MDC: 80,\n      MES: 120\n    }\n\n    const basePower = basePowerDensity[systemType]\n    \n    // Apply environmental corrections\n    const tempFactor = this.applyTemperatureCorrection(1.0, conditions.temperature)\n    const pHFactor = this.calculatePHEffect(conditions.pH)\n    const substrateFactor = this.applySubstrateKinetics(conditions.substrateConcentration)\n    \n    const correctedPower = basePower * tempFactor * pHFactor * substrateFactor\n    \n    // Estimate other metrics based on power\n    const currentDensity = correctedPower / 0.3 // Assume ~0.3V average\n    const coulombicEfficiency = clamp(60 + (pHFactor * 30), 10, 95)\n    const energyEfficiency = clamp(coulombicEfficiency * 0.8, 5, 80)\n    \n    return {\n      powerDensity: Math.max(0, correctedPower),\n      currentDensity: Math.max(0, currentDensity),\n      voltage: clamp(0.1 + (pHFactor * 0.5), 0.05, 0.8),\n      efficiency: {\n        coulombic: coulombicEfficiency,\n        energy: energyEfficiency\n      }\n    }\n  }\n}","// Scientific domain models and data\n\n/**\n * Electrode material database\n */\nexport interface ElectrodeMaterial {\n  id: string\n  name: string\n  category: 'carbon' | 'metal' | 'nanomaterial' | 'composite'\n  properties: {\n    conductivity: number      // S/cm\n    surfaceArea: number       // m²/g\n    porosity: number          // %\n    cost: number             // $/m²\n  }\n  applications: string[]\n}\n\nexport const ELECTRODE_MATERIALS: ElectrodeMaterial[] = [\n  {\n    id: 'carbon_cloth',\n    name: 'Carbon Cloth',\n    category: 'carbon',\n    properties: {\n      conductivity: 1000,\n      surfaceArea: 0.5,\n      porosity: 75,\n      cost: 50\n    },\n    applications: ['MFC', 'MEC', 'MDC']\n  },\n  {\n    id: 'graphite_felt',\n    name: 'Graphite Felt',\n    category: 'carbon',\n    properties: {\n      conductivity: 800,\n      surfaceArea: 0.3,\n      porosity: 85,\n      cost: 30\n    },\n    applications: ['MFC', 'MEC']\n  },\n  {\n    id: 'stainless_steel',\n    name: 'Stainless Steel',\n    category: 'metal',\n    properties: {\n      conductivity: 1500,\n      surfaceArea: 0.1,\n      porosity: 0,\n      cost: 20\n    },\n    applications: ['MEC', 'MDC']\n  }\n]\n\n/**\n * Microbial species database\n */\nexport interface MicrobialSpecies {\n  id: string\n  species: string\n  genus: string\n  characteristics: {\n    electronTransfer: 'direct' | 'mediated' | 'both'\n    optimalTemp: number       // °C\n    optimalPH: number\n    growthRate: number        // h⁻¹\n    powerDensity: number      // mW/m²\n  }\n  cultivation: {\n    medium: string\n    atmosphere: 'aerobic' | 'anaerobic' | 'facultative'\n  }\n}\n\nexport const MICROBIAL_SPECIES: MicrobialSpecies[] = [\n  {\n    id: 'geobacter_sulfurreducens',\n    species: 'sulfurreducens',\n    genus: 'Geobacter',\n    characteristics: {\n      electronTransfer: 'direct',\n      optimalTemp: 30,\n      optimalPH: 7.0,\n      growthRate: 0.15,\n      powerDensity: 200\n    },\n    cultivation: {\n      medium: 'acetate',\n      atmosphere: 'anaerobic'\n    }\n  },\n  {\n    id: 'shewanella_oneidensis',\n    species: 'oneidensis',\n    genus: 'Shewanella',\n    characteristics: {\n      electronTransfer: 'both',\n      optimalTemp: 25,\n      optimalPH: 7.2,\n      growthRate: 0.25,\n      powerDensity: 150\n    },\n    cultivation: {\n      medium: 'lactate',\n      atmosphere: 'facultative'\n    }\n  }\n]\n\n/**\n * System design templates\n */\nexport interface SystemDesign {\n  id: string\n  name: string\n  type: 'MFC' | 'MEC' | 'MDC' | 'MES'\n  description: string\n  typicalApplications: string[]\n  performanceRange: {\n    powerDensity: [number, number] // mW/m² [min, max]\n    efficiency: [number, number]   // % [min, max]\n  }\n}\n\nexport const SYSTEM_DESIGNS: SystemDesign[] = [\n  {\n    id: 'single_chamber_mfc',\n    name: 'Single Chamber MFC',\n    type: 'MFC',\n    description: 'Air cathode microbial fuel cell with single chamber design',\n    typicalApplications: ['Wastewater treatment', 'Biosensors', 'Remote power'],\n    performanceRange: {\n      powerDensity: [10, 500],\n      efficiency: [10, 60]\n    }\n  },\n  {\n    id: 'dual_chamber_mfc',\n    name: 'Dual Chamber MFC',\n    type: 'MFC',\n    description: 'Two chamber design with proton exchange membrane',\n    typicalApplications: ['Research', 'Water treatment', 'Desalination'],\n    performanceRange: {\n      powerDensity: [50, 1000],\n      efficiency: [20, 80]\n    }\n  }\n]"],"mappings":"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","names":[]}